-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lstm_n5_16s_16b is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ch_ena : IN STD_LOGIC_VECTOR (3 downto 0);
    sampleinput : IN STD_LOGIC_VECTOR (23 downto 0);
    weight_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    weight_EN_A : OUT STD_LOGIC;
    weight_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    weight_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    weight_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    weight_Clk_A : OUT STD_LOGIC;
    weight_Rst_A : OUT STD_LOGIC;
    lstm_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    lstm_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of lstm_n5_16s_16b is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lstm_n5_16s_16b,hls_ip_2017_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2104-2L-e-es1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.432750,HLS_SYN_LAT=185,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=12,HLS_SYN_FF=564,HLS_SYN_LUT=2201}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_pp2_stage2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_pp2_stage3 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_91 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv19_1D4C0 : STD_LOGIC_VECTOR (18 downto 0) := "0011101010011000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv6_2D : STD_LOGIC_VECTOR (5 downto 0) := "101101";
    constant ap_const_lv7_46 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_const_lv7_5F : STD_LOGIC_VECTOR (6 downto 0) := "1011111";
    constant ap_const_lv8_7D : STD_LOGIC_VECTOR (7 downto 0) := "01111101";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv8_82 : STD_LOGIC_VECTOR (7 downto 0) := "10000010";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv8_87 : STD_LOGIC_VECTOR (7 downto 0) := "10000111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv14_3000 : STD_LOGIC_VECTOR (13 downto 0) := "11000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv15_7C00 : STD_LOGIC_VECTOR (14 downto 0) := "111110000000000";
    constant ap_const_lv14_1000 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_const_lv8_8C : STD_LOGIC_VECTOR (7 downto 0) := "10001100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal h_state_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal h_state_ce0 : STD_LOGIC;
    signal h_state_we0 : STD_LOGIC;
    signal h_state_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_state_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal lut_sigmoid_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_sigmoid_ce0 : STD_LOGIC;
    signal lut_sigmoid_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal lut_sigmoid_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_sigmoid_ce1 : STD_LOGIC;
    signal lut_sigmoid_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal lut_tanh_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_tanh_ce0 : STD_LOGIC;
    signal lut_tanh_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal lut_tanh_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_tanh_ce1 : STD_LOGIC;
    signal lut_tanh_q1 : STD_LOGIC_VECTOR (12 downto 0);
    signal c_state_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_state_ce0 : STD_LOGIC;
    signal c_state_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal c_state_ce1 : STD_LOGIC;
    signal c_state_we1 : STD_LOGIC;
    signal c_state_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_679 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_691 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_702 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_713 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_2_reg_724 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_3_reg_736 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_4_reg_747 : STD_LOGIC_VECTOR (2 downto 0);
    signal lstm_output_0_in_reg_758 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvarinc_fu_773_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal indvarinc1_fu_790_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal indvarinc2_fu_807_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal indvarinc3_fu_824_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_7_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_cast_fu_860_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_cast_reg_2162 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond5_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_reg_2170 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_5_fu_870_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_5_reg_2174 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_10_fu_876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_reg_2179 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast_fu_885_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_cast_reg_2192 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state7_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_26_fu_918_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_reg_2202 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state8_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state9_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_14_fu_1006_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_14_reg_2217 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal exitcond_flatten_fu_1030_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_2224 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state12_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next_fu_1036_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_next_reg_2228 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal i_mid2_fu_1054_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_mid2_reg_2233 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_39_cast1_mid2_v_fu_1080_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_39_cast1_mid2_v_reg_2239 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_35_mid2_v_fu_1092_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_35_mid2_v_reg_2244 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_cast_fu_1108_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_cast_reg_2249 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_state_addr_2_reg_2265 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_state_addr_2_reg_2270 : STD_LOGIC_VECTOR (2 downto 0);
    signal o_state_addr_2_reg_2275 : STD_LOGIC_VECTOR (2 downto 0);
    signal g_state_addr_2_reg_2280 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_39_cast1_mid2_fu_1147_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_39_cast1_mid2_reg_2285 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state13_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal tmp_51_cast_fu_1153_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_51_cast_reg_2291 : STD_LOGIC_VECTOR (27 downto 0);
    signal i_1_fu_1202_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_2303 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state14_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal tmp_67_fu_1251_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_67_reg_2313 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_block_state15_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_pp1_stage3_11001 : BOOLEAN;
    signal exitcond2_fu_1308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_2323 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state18_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal ap_reg_pp2_iter1_exitcond2_reg_2323 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_9_fu_1314_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_9_reg_2327 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal j_2_cast_fu_1320_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_2_cast_reg_2332 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state19_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state23_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal tmp_37_fu_1324_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_37_reg_2338 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_state_addr_3_reg_2343 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp2_iter1_i_state_addr_3_reg_2343 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_state_addr_4_reg_2353 : STD_LOGIC_VECTOR (2 downto 0);
    signal o_state_addr_4_reg_2358 : STD_LOGIC_VECTOR (2 downto 0);
    signal g_state_addr_4_reg_2363 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp2_iter1_g_state_addr_4_reg_2363 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_78_reg_2368 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage2 : signal is "none";
    signal ap_block_state20_pp2_stage2_iter0 : BOOLEAN;
    signal ap_block_state24_pp2_stage2_iter1 : BOOLEAN;
    signal ap_block_pp2_stage2_11001 : BOOLEAN;
    signal tmp_80_fu_1388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_80_reg_2379 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_91_reg_2394 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage3 : signal is "none";
    signal ap_block_state21_pp2_stage3_iter0 : BOOLEAN;
    signal ap_block_pp2_stage3_11001 : BOOLEAN;
    signal tmp_97_fu_1484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_97_reg_2405 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_109_fu_1561_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_109_reg_2425 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_111_reg_2431 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_reg_2442 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_1625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_reg_2453 : STD_LOGIC_VECTOR (0 downto 0);
    signal lut_tanh_load_2_reg_2463 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal tmp_113_fu_1650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_reg_2468 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_1734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_2478 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state26_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state28_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal ap_reg_pp3_iter1_exitcond1_reg_2478 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_8_fu_1740_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal tmp_128_cast1_fu_1763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_128_cast1_reg_2487 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp3_iter1_tmp_128_cast1_reg_2487 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_state_addr_reg_2492 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_fu_1843_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_2518 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_120_reg_2524 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_127_fu_1862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_127_reg_2535 : STD_LOGIC_VECTOR (0 downto 0);
    signal o_state_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal o_state_load_1_reg_2545 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal exitcond_fu_1957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_2560 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state31_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state32_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal j_7_fu_1963_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal lstm_output_fu_1998_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lstm_output_reg_2579 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal tmp_129_cast_fu_2037_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage3_subdone : BOOLEAN;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state18 : STD_LOGIC;
    signal ap_block_pp2_stage3_subdone : BOOLEAN;
    signal ap_block_pp2_stage2_subdone : BOOLEAN;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state26 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal i_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_state_ce0 : STD_LOGIC;
    signal i_state_we0 : STD_LOGIC;
    signal i_state_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_state_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_state_ce0 : STD_LOGIC;
    signal f_state_we0 : STD_LOGIC;
    signal f_state_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_state_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal o_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal o_state_ce0 : STD_LOGIC;
    signal o_state_we0 : STD_LOGIC;
    signal o_state_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal g_state_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal g_state_ce0 : STD_LOGIC;
    signal g_state_we0 : STD_LOGIC;
    signal g_state_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal g_state_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal invdar_reg_635 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar1_reg_646 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar2_reg_657 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar3_reg_668 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_j_phi_fu_683_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_695_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_j_1_phi_fu_706_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_i_phi_fu_717_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_j_2_phi_fu_728_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal tmp_fu_779_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_830_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_16_fu_913_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal tmp_22_fu_947_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal tmp_27_fu_970_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_cast_fu_1121_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_fu_1142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_mid2_fu_1100_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_fu_1197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal tmp_61_fu_1241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal tmp_68_fu_1280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage3 : BOOLEAN;
    signal tmp_40_fu_1332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal tmp_56_fu_1346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_79_fu_1383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage2 : BOOLEAN;
    signal tmp_82_fu_1408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_85_fu_1418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_93_fu_1479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage3 : BOOLEAN;
    signal tmp_101_fu_1504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_106_fu_1514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_fu_1522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_112_fu_1583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_1620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_fu_1645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_115_fu_1668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal tmp_89_fu_1746_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_124_fu_1857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_fu_1878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_138_cast1_fu_1982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal tmp_123_fu_1993_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_50_fu_1174_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal storemerge_cast_fu_1692_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_59_fu_1224_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal storemerge2_cast_fu_1442_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_66_fu_1273_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal storemerge3_cast_fu_1546_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_72_fu_1301_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal storemerge4_cast_fu_1729_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal weight_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_841_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_9_fu_844_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sampleinput_16b_fu_850_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_889_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_2041_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_15_fu_907_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_cast1_fu_881_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_20_fu_924_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_2047_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_21_fu_942_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_23_fu_952_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_2053_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_28_fu_974_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_2059_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_11_fu_995_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_cast_fu_992_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_1002_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_cast_fu_1012_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_fu_1016_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_6_fu_1042_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_cast_mid1_fu_1062_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_mid1_fu_1066_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_34_mid1_fu_1074_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_31_fu_1024_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_33_fu_1116_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_cast2_fu_1112_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_fu_1126_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_39_cast_mid2_fu_1088_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp26_cast_fu_1132_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_34_fu_1136_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_39_fu_1157_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_42_fu_2065_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_45_fu_1165_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_cast1_fu_1150_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp2_fu_1181_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp27_cast_fu_1187_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_53_fu_1191_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_55_fu_1207_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_57_fu_2072_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_58_fu_1215_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_fu_1231_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_60_fu_1236_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp4_fu_1246_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_62_fu_1256_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_63_fu_2078_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_64_fu_1264_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_69_fu_1284_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_70_fu_2084_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_71_fu_1292_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_52_fu_1340_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_76_fu_1351_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_65_fu_1355_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_74_fu_1361_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_77_fu_1371_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_144_cast_fu_1394_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_81_fu_1398_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_145_cast_fu_1404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_fu_1413_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_767_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sel_tmp6_fu_1430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_1423_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal storemerge2_fu_1434_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_86_fu_1447_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_87_fu_1451_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_88_fu_1457_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_90_fu_1467_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_159_cast_fu_1490_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_99_fu_1494_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_160_cast_fu_1500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_fu_1509_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_41_cast_fu_1519_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sel_tmp3_fu_1534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_1527_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal storemerge3_fu_1538_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_107_fu_1551_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_108_fu_1555_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_110_fu_1571_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_73_fu_1588_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_41_fu_1592_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_43_fu_1598_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_44_fu_1608_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_108_cast_fu_1631_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_48_fu_1635_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_109_cast_fu_1641_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_174_cast_fu_1655_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_114_fu_1658_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_175_cast_fu_1664_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp2_fu_1680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_1673_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal storemerge_fu_1684_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_116_fu_1700_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_177_cast_fu_1706_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal lut_tanh_load_2_cast_fu_1697_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sel_tmp1_fu_1717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_1710_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal storemerge4_fu_1721_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_89_cast_fu_1754_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_118_fu_1758_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_92_fu_2090_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_96_fu_2097_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_93_cast_fu_1776_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_97_cast_fu_1793_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_98_fu_1802_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_117_fu_1819_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_119_fu_1833_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_103_fu_1829_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_128_fu_1868_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_134_cast_fu_1874_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_131_fu_1887_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sel_tmp13_demorgan_fu_1897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_1907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_136_cast_fu_1893_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal lut_tanh_load_cast_fu_1883_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sel_tmp5_fu_1901_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_1919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_1911_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal newSel1_fu_1925_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal newSel2_fu_1932_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_132_fu_2104_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_120_cast_fu_1973_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_135_fu_1977_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_4_cast_fu_1969_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_122_fu_1987_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_136_fu_2006_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_126_fu_2111_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_137_fu_2014_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_127_cast_fu_2023_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_128_cast_fu_2027_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_129_fu_2031_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_12_fu_2041_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_2047_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_2053_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_2059_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_57_fu_2072_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_63_fu_2078_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_70_fu_2084_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;

    component lstm_n5_16s_16b_mjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component lstm_n5_16s_16b_mkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component lstm_n5_16s_16b_mlbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lstm_n5_16s_16b_mmb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component lstm_n5_16s_16b_hbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lstm_n5_16s_16b_lcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component lstm_n5_16s_16b_ldEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component lstm_n5_16s_16b_ceOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lstm_n5_16s_16b_ifYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    h_state_U : component lstm_n5_16s_16b_hbkb
    generic map (
        DataWidth => 16,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => h_state_address0,
        ce0 => h_state_ce0,
        we0 => h_state_we0,
        d0 => h_state_d0,
        q0 => h_state_q0);

    lut_sigmoid_U : component lstm_n5_16s_16b_lcud
    generic map (
        DataWidth => 12,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut_sigmoid_address0,
        ce0 => lut_sigmoid_ce0,
        q0 => lut_sigmoid_q0,
        address1 => lut_sigmoid_address1,
        ce1 => lut_sigmoid_ce1,
        q1 => lut_sigmoid_q1);

    lut_tanh_U : component lstm_n5_16s_16b_ldEe
    generic map (
        DataWidth => 13,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut_tanh_address0,
        ce0 => lut_tanh_ce0,
        q0 => lut_tanh_q0,
        address1 => lut_tanh_address1,
        ce1 => lut_tanh_ce1,
        q1 => lut_tanh_q1);

    c_state_U : component lstm_n5_16s_16b_ceOg
    generic map (
        DataWidth => 16,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_state_address0,
        ce0 => c_state_ce0,
        q0 => c_state_q0,
        address1 => c_state_addr_reg_2492,
        ce1 => c_state_ce1,
        we1 => c_state_we1,
        d1 => c_state_d1);

    i_state_U : component lstm_n5_16s_16b_ifYi
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => i_state_address0,
        ce0 => i_state_ce0,
        we0 => i_state_we0,
        d0 => i_state_d0,
        q0 => i_state_q0);

    f_state_U : component lstm_n5_16s_16b_ifYi
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_state_address0,
        ce0 => f_state_ce0,
        we0 => f_state_we0,
        d0 => f_state_d0,
        q0 => f_state_q0);

    o_state_U : component lstm_n5_16s_16b_ifYi
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => o_state_address0,
        ce0 => o_state_ce0,
        we0 => o_state_we0,
        d0 => o_state_d0,
        q0 => o_state_q0);

    g_state_U : component lstm_n5_16s_16b_ifYi
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => g_state_address0,
        ce0 => g_state_ce0,
        we0 => g_state_we0,
        d0 => g_state_d0,
        q0 => g_state_q0);

    lstm_n5_16s_16b_mjbC_U1 : component lstm_n5_16s_16b_mjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        din0 => tmp_17_fu_889_p1,
        din1 => tmp_12_fu_2041_p1,
        dout => tmp_12_fu_2041_p2);

    lstm_n5_16s_16b_mjbC_U2 : component lstm_n5_16s_16b_mjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        din0 => tmp_20_fu_924_p1,
        din1 => tmp_18_fu_2047_p1,
        dout => tmp_18_fu_2047_p2);

    lstm_n5_16s_16b_mjbC_U3 : component lstm_n5_16s_16b_mjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        din0 => tmp_23_fu_952_p1,
        din1 => tmp_24_fu_2053_p1,
        dout => tmp_24_fu_2053_p2);

    lstm_n5_16s_16b_mjbC_U4 : component lstm_n5_16s_16b_mjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        din0 => tmp_28_fu_974_p1,
        din1 => tmp_29_fu_2059_p1,
        dout => tmp_29_fu_2059_p2);

    lstm_n5_16s_16b_mkbM_U5 : component lstm_n5_16s_16b_mkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => tmp_39_fu_1157_p1,
        din1 => h_state_q0,
        dout => tmp_42_fu_2065_p2);

    lstm_n5_16s_16b_mkbM_U6 : component lstm_n5_16s_16b_mkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => tmp_55_fu_1207_p1,
        din1 => tmp_57_fu_2072_p1,
        dout => tmp_57_fu_2072_p2);

    lstm_n5_16s_16b_mkbM_U7 : component lstm_n5_16s_16b_mkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => tmp_62_fu_1256_p1,
        din1 => tmp_63_fu_2078_p1,
        dout => tmp_63_fu_2078_p2);

    lstm_n5_16s_16b_mkbM_U8 : component lstm_n5_16s_16b_mkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => tmp_69_fu_1284_p1,
        din1 => tmp_70_fu_2084_p1,
        dout => tmp_70_fu_2084_p2);

    lstm_n5_16s_16b_mkbM_U9 : component lstm_n5_16s_16b_mkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => c_state_q0,
        din1 => f_state_q0,
        dout => tmp_92_fu_2090_p2);

    lstm_n5_16s_16b_mlbW_U10 : component lstm_n5_16s_16b_mlbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => g_state_q0,
        din1 => i_state_q0,
        dout => tmp_96_fu_2097_p2);

    lstm_n5_16s_16b_mmb6_U11 : component lstm_n5_16s_16b_mmb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 28)
    port map (
        din0 => o_state_load_1_reg_2545,
        din1 => newSel2_fu_1932_p3,
        dout => tmp_132_fu_2104_p2);

    lstm_n5_16s_16b_mlbW_U12 : component lstm_n5_16s_16b_mlbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => h_state_q0,
        din1 => tmp_136_fu_2006_p1,
        dout => tmp_126_fu_2111_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_7_fu_835_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (((ap_block_pp0_stage3_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state6 xor ap_const_logic_1);
                elsif ((((ap_block_pp0_stage3_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_7_fu_835_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state12) and (((ap_block_pp1_stage3_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3)) or ((ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state12 xor ap_const_logic_1);
                elsif ((((ap_block_pp1_stage3_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3)) or ((ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_block_pp2_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state18) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state18) and (((ap_block_pp2_stage3_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3)) or ((ap_block_pp2_stage2_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_condition_pp2_exit_iter0_state18 xor ap_const_logic_1);
                elsif ((((ap_block_pp2_stage3_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3)) or ((ap_block_pp2_stage2_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2)))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_block_pp3_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state26) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp3_stage0_subdone = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state26)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_condition_pp3_exit_iter0_state26 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp3_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_block_pp4_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_lv1_1 = exitcond_fu_1957_p2))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp4_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_713_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten_reg_2224))) then 
                i_reg_713 <= i_1_reg_2303;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_reg_713 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_691_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten_reg_2224))) then 
                indvar_flatten_reg_691 <= indvar_flatten_next_reg_2228;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                indvar_flatten_reg_691 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    invdar1_reg_646_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_1_fu_784_p2))) then 
                invdar1_reg_646 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_3_fu_801_p2))) then 
                invdar1_reg_646 <= indvarinc1_fu_790_p2;
            end if; 
        end if;
    end process;

    invdar2_reg_657_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_3_fu_801_p2))) then 
                invdar2_reg_657 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_5_fu_818_p2))) then 
                invdar2_reg_657 <= indvarinc2_fu_807_p2;
            end if; 
        end if;
    end process;

    invdar3_reg_668_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = tmp_5_fu_818_p2))) then 
                invdar3_reg_668 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_7_fu_835_p2 = ap_const_lv1_0))) then 
                invdar3_reg_668 <= indvarinc3_fu_824_p2;
            end if; 
        end if;
    end process;

    invdar_reg_635_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_1_fu_784_p2))) then 
                invdar_reg_635 <= indvarinc_fu_773_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                invdar_reg_635 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_1_reg_702_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten_reg_2224))) then 
                j_1_reg_702 <= tmp_35_mid2_v_reg_2244;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_1_reg_702 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_2_reg_724_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                j_2_reg_724 <= ap_const_lv3_0;
            elsif (((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond2_reg_2323))) then 
                j_2_reg_724 <= j_9_reg_2327;
            end if; 
        end if;
    end process;

    j_3_reg_736_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                j_3_reg_736 <= ap_const_lv3_0;
            elsif (((ap_block_pp3_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_lv1_0 = exitcond1_fu_1734_p2))) then 
                j_3_reg_736 <= j_8_fu_1740_p2;
            end if; 
        end if;
    end process;

    j_4_reg_747_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp4_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_lv1_0 = exitcond_fu_1957_p2))) then 
                j_4_reg_747 <= j_7_fu_1963_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                j_4_reg_747 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_679_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (exitcond5_reg_2170 = ap_const_lv1_0))) then 
                j_reg_679 <= j_5_reg_2174;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_7_fu_835_p2 = ap_const_lv1_1))) then 
                j_reg_679 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    lstm_output_0_in_reg_758_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp4_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_lv1_0 = exitcond_reg_2560))) then 
                lstm_output_0_in_reg_758 <= tmp_129_cast_fu_2037_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                lstm_output_0_in_reg_758 <= weight_Dout_A;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                ap_reg_pp2_iter1_exitcond2_reg_2323 <= exitcond2_reg_2323;
                exitcond2_reg_2323 <= exitcond2_fu_1308_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp2_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                ap_reg_pp2_iter1_g_state_addr_4_reg_2363 <= g_state_addr_4_reg_2363;
                ap_reg_pp2_iter1_i_state_addr_3_reg_2343 <= i_state_addr_3_reg_2343;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp3_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                ap_reg_pp3_iter1_exitcond1_reg_2478 <= exitcond1_reg_2478;
                    ap_reg_pp3_iter1_tmp_128_cast1_reg_2487(6 downto 0) <= tmp_128_cast1_reg_2487(6 downto 0);
                exitcond1_reg_2478 <= exitcond1_fu_1734_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp3_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_lv1_0 = exitcond1_fu_1734_p2))) then
                c_state_addr_reg_2492 <= tmp_128_cast1_fu_1763_p1(7 - 1 downto 0);
                    tmp_128_cast1_reg_2487(6 downto 0) <= tmp_128_cast1_fu_1763_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then
                exitcond5_reg_2170 <= exitcond5_fu_864_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_flatten_reg_2224 <= exitcond_flatten_fu_1030_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp4_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                exitcond_reg_2560 <= exitcond_fu_1957_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten_fu_1030_p2))) then
                f_state_addr_2_reg_2270 <= tmp_35_mid2_fu_1100_p1(3 - 1 downto 0);
                g_state_addr_2_reg_2280 <= tmp_35_mid2_fu_1100_p1(3 - 1 downto 0);
                    i_cast_reg_2249(2 downto 0) <= i_cast_fu_1108_p1(2 downto 0);
                i_mid2_reg_2233 <= i_mid2_fu_1054_p3;
                i_state_addr_2_reg_2265 <= tmp_35_mid2_fu_1100_p1(3 - 1 downto 0);
                o_state_addr_2_reg_2275 <= tmp_35_mid2_fu_1100_p1(3 - 1 downto 0);
                tmp_39_cast1_mid2_v_reg_2239 <= tmp_39_cast1_mid2_v_fu_1080_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp2_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_lv1_0 = exitcond2_reg_2323))) then
                f_state_addr_4_reg_2353 <= tmp_40_fu_1332_p1(3 - 1 downto 0);
                g_state_addr_4_reg_2363 <= tmp_40_fu_1332_p1(3 - 1 downto 0);
                i_state_addr_3_reg_2343 <= tmp_40_fu_1332_p1(3 - 1 downto 0);
                    j_2_cast_reg_2332(2 downto 0) <= j_2_cast_fu_1320_p1(2 downto 0);
                o_state_addr_4_reg_2358 <= tmp_40_fu_1332_p1(3 - 1 downto 0);
                    tmp_37_reg_2338(2 downto 0) <= tmp_37_fu_1324_p3(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten_reg_2224))) then
                i_1_reg_2303 <= i_1_fu_1202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp3_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_lv1_0 = exitcond1_reg_2478))) then
                icmp_reg_2518 <= icmp_fu_1843_p2;
                tmp_120_reg_2524 <= tmp_98_fu_1802_p2(19 downto 19);
                tmp_127_reg_2535 <= tmp_127_fu_1862_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                indvar_flatten_next_reg_2228 <= indvar_flatten_next_fu_1036_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then
                j_5_reg_2174 <= j_5_fu_870_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                j_9_reg_2327 <= j_9_fu_1314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0) and (exitcond5_reg_2170 = ap_const_lv1_0))) then
                    j_cast_reg_2192(2 downto 0) <= j_cast_fu_885_p1(2 downto 0);
                tmp_26_reg_2202 <= tmp_26_fu_918_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp4_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                lstm_output_reg_2579 <= lstm_output_fu_1998_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp2_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_lv1_0 = ap_reg_pp2_iter1_exitcond2_reg_2323))) then
                lut_tanh_load_2_reg_2463 <= lut_tanh_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp3_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_lv1_0 = exitcond1_reg_2478))) then
                o_state_load_1_reg_2545 <= o_state_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond2_reg_2323))) then
                tmp_109_reg_2425 <= tmp_108_fu_1555_p2(15 downto 5);
                tmp_111_reg_2431 <= tmp_108_fu_1555_p2(15 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_7_fu_835_p2 = ap_const_lv1_1))) then
                tmp_10_cast_reg_2162 <= tmp_10_cast_fu_860_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (exitcond5_fu_864_p2 = ap_const_lv1_0))) then
                    tmp_10_reg_2179(2 downto 0) <= tmp_10_fu_876_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp2_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_lv1_0 = ap_reg_pp2_iter1_exitcond2_reg_2323))) then
                tmp_113_reg_2468 <= tmp_113_fu_1650_p2;
                tmp_47_reg_2453 <= tmp_47_fu_1625_p2;
                tmp_75_reg_2442 <= tmp_41_fu_1592_p2(15 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_14_reg_2217 <= tmp_14_fu_1006_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten_fu_1030_p2))) then
                tmp_35_mid2_v_reg_2244 <= tmp_35_mid2_v_fu_1092_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_lv1_0 = exitcond_flatten_reg_2224))) then
                    tmp_39_cast1_mid2_reg_2285(4 downto 0) <= tmp_39_cast1_mid2_fu_1147_p1(4 downto 0);
                tmp_51_cast_reg_2291 <= tmp_51_cast_fu_1153_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage2_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_lv1_0 = exitcond_flatten_reg_2224))) then
                tmp_67_reg_2313 <= tmp_67_fu_1251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp2_stage2_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_lv1_0 = exitcond2_reg_2323))) then
                tmp_78_reg_2368 <= tmp_65_fu_1355_p2(15 downto 15);
                tmp_80_reg_2379 <= tmp_80_fu_1388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp2_stage3_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_lv1_0 = exitcond2_reg_2323))) then
                tmp_91_reg_2394 <= tmp_87_fu_1451_p2(15 downto 15);
                tmp_97_reg_2405 <= tmp_97_fu_1484_p2;
            end if;
        end if;
    end process;
    tmp_10_reg_2179(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    j_cast_reg_2192(3) <= '0';
    i_cast_reg_2249(6 downto 3) <= "0000";
    tmp_39_cast1_mid2_reg_2285(6 downto 5) <= "00";
    j_2_cast_reg_2332(7 downto 3) <= "00000";
    tmp_37_reg_2338(3) <= '1';
    tmp_128_cast1_reg_2487(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    ap_reg_pp3_iter1_tmp_128_cast1_reg_2487(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_7_fu_835_p2, exitcond5_fu_864_p2, ap_enable_reg_pp0_iter0, exitcond_flatten_fu_1030_p2, ap_enable_reg_pp1_iter0, exitcond2_fu_1308_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter1, exitcond1_fu_1734_p2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp1_stage0_subdone, ap_block_pp1_stage3_subdone, ap_block_pp2_stage0_subdone, ap_block_pp2_stage3_subdone, ap_block_pp2_stage2_subdone, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2, ap_block_pp4_stage0_subdone, tmp_1_fu_784_p2, tmp_3_fu_801_p2, tmp_5_fu_818_p2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp1_stage1_subdone, ap_block_pp1_stage2_subdone, ap_block_pp2_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_1_fu_784_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_3_fu_801_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = tmp_5_fu_818_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_7_fu_835_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = exitcond5_fu_864_p2))) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = exitcond5_fu_864_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_block_pp0_stage1_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_block_pp0_stage2_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_block_pp0_stage3_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = exitcond_flatten_fu_1030_p2))) and (ap_block_pp1_stage0_subdone = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = exitcond_flatten_fu_1030_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_block_pp1_stage1_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_block_pp1_stage2_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((ap_block_pp1_stage3_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_block_pp2_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_1 = exitcond2_fu_1308_p2))) and (ap_block_pp2_stage0_subdone = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_block_pp2_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_1 = exitcond2_fu_1308_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_block_pp2_stage1_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_pp2_stage2 => 
                if ((not(((ap_block_pp2_stage2_subdone = ap_const_boolean_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) and (ap_block_pp2_stage2_subdone = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                elsif (((ap_block_pp2_stage2_subdone = ap_const_boolean_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                end if;
            when ap_ST_fsm_pp2_stage3 => 
                if ((ap_block_pp2_stage3_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage3;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_block_pp3_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_lv1_1 = exitcond1_fu_1734_p2))) and not(((ap_block_pp3_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_block_pp3_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2)) or ((ap_block_pp3_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_lv1_1 = exitcond1_fu_1734_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((ap_block_pp4_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_block_pp4_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(11);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(12);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(13);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(15);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(16);
    ap_CS_fsm_pp2_stage2 <= ap_CS_fsm(17);
    ap_CS_fsm_pp2_stage3 <= ap_CS_fsm(18);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(23);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(19);
    ap_CS_fsm_state29 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(22);
    ap_CS_fsm_state33 <= ap_CS_fsm(24);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state6_assign_proc : process(exitcond5_fu_864_p2)
    begin
        if ((ap_const_lv1_1 = exitcond5_fu_864_p2)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state12_assign_proc : process(exitcond_flatten_fu_1030_p2)
    begin
        if ((ap_const_lv1_1 = exitcond_flatten_fu_1030_p2)) then 
            ap_condition_pp1_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state18_assign_proc : process(exitcond2_fu_1308_p2)
    begin
        if ((ap_const_lv1_1 = exitcond2_fu_1308_p2)) then 
            ap_condition_pp2_exit_iter0_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state26_assign_proc : process(exitcond1_fu_1734_p2)
    begin
        if ((ap_const_lv1_1 = exitcond1_fu_1734_p2)) then 
            ap_condition_pp3_exit_iter0_state26 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter1) and (ap_const_logic_0 = ap_enable_reg_pp1_iter0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp2_iter1) and (ap_const_logic_0 = ap_enable_reg_pp2_iter0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp3_iter2) and (ap_const_logic_0 = ap_enable_reg_pp3_iter1) and (ap_const_logic_0 = ap_enable_reg_pp3_iter0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp4_iter1) and (ap_const_logic_0 = ap_enable_reg_pp4_iter0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_717_p4_assign_proc : process(i_reg_713, exitcond_flatten_reg_2224, ap_CS_fsm_pp1_stage0, i_1_reg_2303, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten_reg_2224))) then 
            ap_phi_mux_i_phi_fu_717_p4 <= i_1_reg_2303;
        else 
            ap_phi_mux_i_phi_fu_717_p4 <= i_reg_713;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_695_p4_assign_proc : process(indvar_flatten_reg_691, exitcond_flatten_reg_2224, ap_CS_fsm_pp1_stage0, indvar_flatten_next_reg_2228, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten_reg_2224))) then 
            ap_phi_mux_indvar_flatten_phi_fu_695_p4 <= indvar_flatten_next_reg_2228;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_695_p4 <= indvar_flatten_reg_691;
        end if; 
    end process;


    ap_phi_mux_j_1_phi_fu_706_p4_assign_proc : process(j_1_reg_702, exitcond_flatten_reg_2224, ap_CS_fsm_pp1_stage0, tmp_35_mid2_v_reg_2244, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten_reg_2224))) then 
            ap_phi_mux_j_1_phi_fu_706_p4 <= tmp_35_mid2_v_reg_2244;
        else 
            ap_phi_mux_j_1_phi_fu_706_p4 <= j_1_reg_702;
        end if; 
    end process;


    ap_phi_mux_j_2_phi_fu_728_p4_assign_proc : process(j_2_reg_724, exitcond2_reg_2323, ap_CS_fsm_pp2_stage0, j_9_reg_2327, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_block_pp2_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond2_reg_2323))) then 
            ap_phi_mux_j_2_phi_fu_728_p4 <= j_9_reg_2327;
        else 
            ap_phi_mux_j_2_phi_fu_728_p4 <= j_2_reg_724;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_683_p4_assign_proc : process(j_reg_679, exitcond5_reg_2170, ap_CS_fsm_pp0_stage0, j_5_reg_2174, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond5_reg_2170 = ap_const_lv1_0))) then 
            ap_phi_mux_j_phi_fu_683_p4 <= j_5_reg_2174;
        else 
            ap_phi_mux_j_phi_fu_683_p4 <= j_reg_679;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_state_address0 <= tmp_128_cast1_fu_1763_p1(7 - 1 downto 0);

    c_state_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_block_pp3_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            c_state_ce0 <= ap_const_logic_1;
        else 
            c_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_state_ce1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_block_pp3_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            c_state_ce1 <= ap_const_logic_1;
        else 
            c_state_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    c_state_d1 <= tmp_98_fu_1802_p2(19 downto 4);

    c_state_we1_assign_proc : process(exitcond1_reg_2478, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_block_pp3_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_lv1_0 = exitcond1_reg_2478))) then 
            c_state_we1 <= ap_const_logic_1;
        else 
            c_state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_1734_p2 <= "1" when (j_3_reg_736 = ap_const_lv3_5) else "0";
    exitcond2_fu_1308_p2 <= "1" when (ap_phi_mux_j_2_phi_fu_728_p4 = ap_const_lv3_5) else "0";
    exitcond3_fu_1048_p2 <= "1" when (ap_phi_mux_i_phi_fu_717_p4 = ap_const_lv3_5) else "0";
    exitcond5_fu_864_p2 <= "1" when (ap_phi_mux_j_phi_fu_683_p4 = ap_const_lv3_5) else "0";
    exitcond_flatten_fu_1030_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_695_p4 = ap_const_lv5_19) else "0";
    exitcond_fu_1957_p2 <= "1" when (j_4_reg_747 = ap_const_lv3_5) else "0";

    f_state_address0_assign_proc : process(ap_CS_fsm_state3, ap_enable_reg_pp0_iter0, tmp_10_reg_2179, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp1_iter0, f_state_addr_2_reg_2270, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, f_state_addr_4_reg_2353, ap_CS_fsm_pp2_stage3, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, tmp_2_fu_796_p1, ap_block_pp0_stage2, ap_block_pp1_stage1, ap_block_pp1_stage2, tmp_40_fu_1332_p1, ap_block_pp2_stage1, ap_block_pp2_stage3, ap_block_pp3_stage0, tmp_89_fu_1746_p1)
    begin
        if (((ap_block_pp3_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            f_state_address0 <= tmp_89_fu_1746_p1(3 - 1 downto 0);
        elsif (((ap_block_pp2_stage3 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            f_state_address0 <= f_state_addr_4_reg_2353;
        elsif (((ap_block_pp2_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            f_state_address0 <= tmp_40_fu_1332_p1(3 - 1 downto 0);
        elsif ((((ap_block_pp1_stage2 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_block_pp1_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)))) then 
            f_state_address0 <= f_state_addr_2_reg_2270;
        elsif (((ap_block_pp0_stage2 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            f_state_address0 <= tmp_10_reg_2179(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            f_state_address0 <= tmp_2_fu_796_p1(3 - 1 downto 0);
        else 
            f_state_address0 <= "XXX";
        end if; 
    end process;


    f_state_ce0_assign_proc : process(ap_CS_fsm_state3, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_block_pp3_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_block_pp2_stage3_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)) or ((ap_block_pp2_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)) or ((ap_block_pp1_stage2_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_block_pp1_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_block_pp0_stage2_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)))) then 
            f_state_ce0 <= ap_const_logic_1;
        else 
            f_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    f_state_d0_assign_proc : process(ap_CS_fsm_state3, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage3, ap_block_pp0_stage2, ap_block_pp1_stage2, ap_block_pp2_stage3, tmp_59_fu_1224_p2, storemerge2_cast_fu_1442_p1, tmp_18_fu_2047_p2)
    begin
        if (((ap_block_pp2_stage3 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            f_state_d0 <= storemerge2_cast_fu_1442_p1;
        elsif (((ap_block_pp1_stage2 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            f_state_d0 <= tmp_59_fu_1224_p2;
        elsif (((ap_block_pp0_stage2 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            f_state_d0 <= tmp_18_fu_2047_p2(30 downto 15);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            f_state_d0 <= ap_const_lv16_0;
        else 
            f_state_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    f_state_we0_assign_proc : process(ap_CS_fsm_state3, exitcond5_reg_2170, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, exitcond_flatten_reg_2224, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, exitcond2_reg_2323, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_block_pp2_stage3_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_0 = exitcond2_reg_2323)) or ((ap_block_pp1_stage2_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten_reg_2224)) or ((ap_block_pp0_stage2_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond5_reg_2170 = ap_const_lv1_0)))) then 
            f_state_we0 <= ap_const_logic_1;
        else 
            f_state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    g_state_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, tmp_10_reg_2179, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, g_state_addr_2_reg_2280, ap_CS_fsm_pp1_stage3, ap_enable_reg_pp2_iter0, g_state_addr_4_reg_2363, ap_reg_pp2_iter1_g_state_addr_4_reg_2363, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, tmp_6_fu_830_p1, ap_block_pp1_stage3, ap_block_pp2_stage2, ap_block_pp2_stage3, ap_block_pp3_stage0, tmp_89_fu_1746_p1)
    begin
        if (((ap_block_pp3_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            g_state_address0 <= tmp_89_fu_1746_p1(3 - 1 downto 0);
        elsif (((ap_block_pp2_stage2 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            g_state_address0 <= ap_reg_pp2_iter1_g_state_addr_4_reg_2363;
        elsif (((ap_block_pp2_stage3 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            g_state_address0 <= g_state_addr_4_reg_2363;
        elsif ((((ap_block_pp1_stage3 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            g_state_address0 <= g_state_addr_2_reg_2280;
        elsif (((ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            g_state_address0 <= tmp_10_reg_2179(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            g_state_address0 <= tmp_6_fu_830_p1(3 - 1 downto 0);
        else 
            g_state_address0 <= "XXX";
        end if; 
    end process;


    g_state_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_block_pp3_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_block_pp2_stage2_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2)) or ((ap_block_pp2_stage3_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)) or ((ap_block_pp1_stage3_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0)))) then 
            g_state_ce0 <= ap_const_logic_1;
        else 
            g_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    g_state_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage2, tmp_72_fu_1301_p2, storemerge4_cast_fu_1729_p1, tmp_29_fu_2059_p2)
    begin
        if (((ap_block_pp2_stage2 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            g_state_d0 <= storemerge4_cast_fu_1729_p1;
        elsif (((ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            g_state_d0 <= tmp_72_fu_1301_p2;
        elsif (((ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            g_state_d0 <= tmp_29_fu_2059_p2(30 downto 15);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            g_state_d0 <= ap_const_lv16_0;
        else 
            g_state_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    g_state_we0_assign_proc : process(ap_CS_fsm_state5, exitcond5_reg_2170, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, exitcond_flatten_reg_2224, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_reg_pp2_iter1_exitcond2_reg_2323, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_enable_reg_pp2_iter1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_block_pp2_stage2_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_lv1_0 = ap_reg_pp2_iter1_exitcond2_reg_2323)) or ((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten_reg_2224)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (exitcond5_reg_2170 = ap_const_lv1_0)))) then 
            g_state_we0 <= ap_const_logic_1;
        else 
            g_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_767_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(lut_sigmoid_q1));

    h_state_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_reg_pp3_iter1_tmp_128_cast1_reg_2487, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_enable_reg_pp3_iter2, ap_block_pp1_stage0, tmp_34_cast_fu_1121_p1, ap_block_pp3_stage0, tmp_138_cast1_fu_1982_p1, ap_block_pp4_stage0)
    begin
        if (((ap_block_pp4_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            h_state_address0 <= tmp_138_cast1_fu_1982_p1(7 - 1 downto 0);
        elsif (((ap_block_pp3_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2))) then 
            h_state_address0 <= ap_reg_pp3_iter1_tmp_128_cast1_reg_2487(7 - 1 downto 0);
        elsif (((ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            h_state_address0 <= tmp_34_cast_fu_1121_p1(7 - 1 downto 0);
        else 
            h_state_address0 <= "XXXXXXX";
        end if; 
    end process;


    h_state_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_block_pp3_stage0_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_block_pp4_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_block_pp3_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2)) or ((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            h_state_ce0 <= ap_const_logic_1;
        else 
            h_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    h_state_d0 <= tmp_132_fu_2104_p2(27 downto 12);

    h_state_we0_assign_proc : process(ap_block_pp3_stage0_11001, ap_reg_pp3_iter1_exitcond1_reg_2478, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_block_pp3_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter2) and (ap_const_lv1_0 = ap_reg_pp3_iter1_exitcond1_reg_2478))) then 
            h_state_we0 <= ap_const_logic_1;
        else 
            h_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_1202_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(i_mid2_reg_2233));
    i_cast1_fu_1150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_mid2_reg_2233),6));
    i_cast2_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_mid2_fu_1054_p3),5));
    i_cast_fu_1108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_mid2_fu_1054_p3),7));
    i_mid2_fu_1054_p3 <= 
        ap_const_lv3_0 when (exitcond3_fu_1048_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_717_p4;

    i_state_address0_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, tmp_10_reg_2179, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, i_state_addr_2_reg_2265, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp2_stage0, i_state_addr_3_reg_2343, ap_reg_pp2_iter1_i_state_addr_3_reg_2343, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp1_stage0, ap_block_pp2_stage0, tmp_fu_779_p1, ap_block_pp0_stage1, tmp_35_mid2_fu_1100_p1, ap_block_pp1_stage1, ap_block_pp2_stage2, ap_block_pp3_stage0, tmp_89_fu_1746_p1)
    begin
        if (((ap_block_pp3_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            i_state_address0 <= tmp_89_fu_1746_p1(3 - 1 downto 0);
        elsif (((ap_block_pp2_stage2 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            i_state_address0 <= ap_reg_pp2_iter1_i_state_addr_3_reg_2343;
        elsif (((ap_block_pp2_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            i_state_address0 <= i_state_addr_3_reg_2343;
        elsif (((ap_block_pp1_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            i_state_address0 <= i_state_addr_2_reg_2265;
        elsif (((ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            i_state_address0 <= tmp_35_mid2_fu_1100_p1(3 - 1 downto 0);
        elsif (((ap_block_pp0_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            i_state_address0 <= tmp_10_reg_2179(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            i_state_address0 <= tmp_fu_779_p1(3 - 1 downto 0);
        else 
            i_state_address0 <= "XXX";
        end if; 
    end process;


    i_state_ce0_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_block_pp3_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_block_pp2_stage2_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2)) or ((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_block_pp1_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0)))) then 
            i_state_ce0 <= ap_const_logic_1;
        else 
            i_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    i_state_d0_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter1, ap_block_pp0_stage1, ap_block_pp1_stage1, ap_block_pp2_stage2, tmp_50_fu_1174_p2, storemerge_cast_fu_1692_p1, tmp_12_fu_2041_p2)
    begin
        if (((ap_block_pp2_stage2 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            i_state_d0 <= storemerge_cast_fu_1692_p1;
        elsif (((ap_block_pp1_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            i_state_d0 <= tmp_50_fu_1174_p2;
        elsif (((ap_block_pp0_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            i_state_d0 <= tmp_12_fu_2041_p2(30 downto 15);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            i_state_d0 <= ap_const_lv16_0;
        else 
            i_state_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    i_state_we0_assign_proc : process(ap_CS_fsm_state2, exitcond5_reg_2170, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, exitcond_flatten_reg_2224, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_reg_pp2_iter1_exitcond2_reg_2323, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_block_pp2_stage2_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_lv1_0 = ap_reg_pp2_iter1_exitcond2_reg_2323)) or ((ap_block_pp1_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten_reg_2224)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0) and (exitcond5_reg_2170 = ap_const_lv1_0)))) then 
            i_state_we0 <= ap_const_logic_1;
        else 
            i_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_fu_1843_p2 <= "1" when (signed(tmp_119_fu_1833_p4) > signed(ap_const_lv5_0)) else "0";
    indvar_flatten_next_fu_1036_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_695_p4) + unsigned(ap_const_lv5_1));
    indvarinc1_fu_790_p2 <= std_logic_vector(unsigned(invdar1_reg_646) + unsigned(ap_const_lv3_1));
    indvarinc2_fu_807_p2 <= std_logic_vector(unsigned(invdar2_reg_657) + unsigned(ap_const_lv3_1));
    indvarinc3_fu_824_p2 <= std_logic_vector(unsigned(invdar3_reg_668) + unsigned(ap_const_lv3_1));
    indvarinc_fu_773_p2 <= std_logic_vector(unsigned(invdar_reg_635) + unsigned(ap_const_lv3_1));
    j_1_cast_fu_1012_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_1_phi_fu_706_p4),5));
    j_1_cast_mid1_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_6_fu_1042_p2),5));
    j_2_cast_fu_1320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_724),8));
    j_4_cast_fu_1969_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_reg_747),8));
    j_5_fu_870_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_phi_fu_683_p4) + unsigned(ap_const_lv3_1));
    j_6_fu_1042_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_j_1_phi_fu_706_p4));
    j_7_fu_1963_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(j_4_reg_747));
    j_8_fu_1740_p2 <= std_logic_vector(unsigned(j_3_reg_736) + unsigned(ap_const_lv3_1));
    j_9_fu_1314_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_2_phi_fu_728_p4) + unsigned(ap_const_lv3_1));
    j_cast1_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_679),5));
    j_cast_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_679),4));
    lstm_out <= lstm_output_reg_2579;

    lstm_out_ap_vld_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            lstm_out_ap_vld <= ap_const_logic_1;
        else 
            lstm_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    lstm_output_fu_1998_p1 <= lstm_output_0_in_reg_758(16 - 1 downto 0);

    lut_sigmoid_address0_assign_proc : process(ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, tmp_79_fu_1383_p1, ap_block_pp2_stage2, tmp_93_fu_1479_p1, ap_block_pp2_stage3, tmp_46_fu_1620_p1)
    begin
        if (((ap_block_pp2_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            lut_sigmoid_address0 <= tmp_46_fu_1620_p1(10 - 1 downto 0);
        elsif (((ap_block_pp2_stage3 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            lut_sigmoid_address0 <= tmp_93_fu_1479_p1(10 - 1 downto 0);
        elsif (((ap_block_pp2_stage2 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            lut_sigmoid_address0 <= tmp_79_fu_1383_p1(10 - 1 downto 0);
        else 
            lut_sigmoid_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    lut_sigmoid_address1_assign_proc : process(ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage2, tmp_82_fu_1408_p1, ap_block_pp2_stage3, tmp_101_fu_1504_p1, tmp_49_fu_1645_p1)
    begin
        if (((ap_block_pp2_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            lut_sigmoid_address1 <= tmp_49_fu_1645_p1(10 - 1 downto 0);
        elsif (((ap_block_pp2_stage3 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            lut_sigmoid_address1 <= tmp_101_fu_1504_p1(10 - 1 downto 0);
        elsif (((ap_block_pp2_stage2 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            lut_sigmoid_address1 <= tmp_82_fu_1408_p1(10 - 1 downto 0);
        else 
            lut_sigmoid_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    lut_sigmoid_ce0_assign_proc : process(ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_block_pp2_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_block_pp2_stage3_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)) or ((ap_block_pp2_stage2_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)))) then 
            lut_sigmoid_ce0 <= ap_const_logic_1;
        else 
            lut_sigmoid_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lut_sigmoid_ce1_assign_proc : process(ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_block_pp2_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_block_pp2_stage3_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)) or ((ap_block_pp2_stage2_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)))) then 
            lut_sigmoid_ce1 <= ap_const_logic_1;
        else 
            lut_sigmoid_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lut_tanh_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp2_stage0, ap_block_pp2_stage1, tmp_112_fu_1583_p1, tmp_115_fu_1668_p1, ap_block_pp3_stage0, tmp_124_fu_1857_p1)
    begin
        if (((ap_block_pp3_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            lut_tanh_address0 <= tmp_124_fu_1857_p1(10 - 1 downto 0);
        elsif (((ap_block_pp2_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            lut_tanh_address0 <= tmp_115_fu_1668_p1(10 - 1 downto 0);
        elsif (((ap_block_pp2_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            lut_tanh_address0 <= tmp_112_fu_1583_p1(10 - 1 downto 0);
        else 
            lut_tanh_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    lut_tanh_address1 <= tmp_130_fu_1878_p1(10 - 1 downto 0);

    lut_tanh_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if ((((ap_block_pp3_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_block_pp2_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)) or ((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            lut_tanh_ce0 <= ap_const_logic_1;
        else 
            lut_tanh_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lut_tanh_ce1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_block_pp3_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            lut_tanh_ce1 <= ap_const_logic_1;
        else 
            lut_tanh_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lut_tanh_load_2_cast_fu_1697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut_tanh_load_2_reg_2463),14));
    lut_tanh_load_cast_fu_1883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lut_tanh_q0),14));
    newSel1_fu_1925_p3 <= 
        ap_const_lv14_1000 when (icmp_reg_2518(0) = '1') else 
        ap_const_lv14_3000;
    newSel2_fu_1932_p3 <= 
        newSel_fu_1911_p3 when (or_cond_fu_1919_p2(0) = '1') else 
        newSel1_fu_1925_p3;
    newSel_fu_1911_p3 <= 
        tmp_136_cast_fu_1893_p1 when (sel_tmp9_fu_1907_p2(0) = '1') else 
        lut_tanh_load_cast_fu_1883_p1;

    o_state_address0_assign_proc : process(ap_CS_fsm_state4, ap_enable_reg_pp0_iter0, tmp_10_reg_2179, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp1_iter0, o_state_addr_2_reg_2275, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, o_state_addr_4_reg_2358, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp2_stage0, tmp_4_fu_813_p1, ap_block_pp0_stage3, ap_block_pp1_stage2, ap_block_pp1_stage3, ap_block_pp2_stage2, ap_block_pp3_stage0, tmp_89_fu_1746_p1)
    begin
        if (((ap_block_pp3_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            o_state_address0 <= tmp_89_fu_1746_p1(3 - 1 downto 0);
        elsif ((((ap_block_pp2_stage2 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)) or ((ap_block_pp2_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            o_state_address0 <= o_state_addr_4_reg_2358;
        elsif ((((ap_block_pp1_stage3 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_block_pp1_stage2 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)))) then 
            o_state_address0 <= o_state_addr_2_reg_2275;
        elsif (((ap_block_pp0_stage3 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            o_state_address0 <= tmp_10_reg_2179(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            o_state_address0 <= tmp_4_fu_813_p1(3 - 1 downto 0);
        else 
            o_state_address0 <= "XXX";
        end if; 
    end process;


    o_state_ce0_assign_proc : process(ap_CS_fsm_state4, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_block_pp3_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp3_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_block_pp2_stage2_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)) or ((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_block_pp1_stage3_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_block_pp1_stage2_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_block_pp0_stage3_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)))) then 
            o_state_ce0 <= ap_const_logic_1;
        else 
            o_state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    o_state_d0_assign_proc : process(ap_CS_fsm_state4, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, ap_block_pp0_stage3, ap_block_pp1_stage3, tmp_66_fu_1273_p2, storemerge3_cast_fu_1546_p1, tmp_24_fu_2053_p2)
    begin
        if (((ap_block_pp2_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            o_state_d0 <= storemerge3_cast_fu_1546_p1;
        elsif (((ap_block_pp1_stage3 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            o_state_d0 <= tmp_66_fu_1273_p2;
        elsif (((ap_block_pp0_stage3 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            o_state_d0 <= tmp_24_fu_2053_p2(30 downto 15);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            o_state_d0 <= ap_const_lv16_0;
        else 
            o_state_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    o_state_we0_assign_proc : process(ap_CS_fsm_state4, exitcond5_reg_2170, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, exitcond_flatten_reg_2224, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_11001, exitcond2_reg_2323, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond2_reg_2323)) or ((ap_block_pp1_stage3_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten_reg_2224)) or ((ap_block_pp0_stage3_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond5_reg_2170 = ap_const_lv1_0)))) then 
            o_state_we0 <= ap_const_logic_1;
        else 
            o_state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_1919_p2 <= (sel_tmp9_fu_1907_p2 or sel_tmp5_fu_1901_p2);
    p_shl1_cast_fu_1002_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_995_p3),7));
    p_shl_fu_1016_p3 <= (ap_phi_mux_j_1_phi_fu_706_p4 & ap_const_lv2_0);
    p_shl_mid1_fu_1066_p3 <= (j_6_fu_1042_p2 & ap_const_lv2_0);
    sampleinput_16b_fu_850_p4 <= tmp_9_fu_844_p2(18 downto 3);
    sel_tmp13_demorgan_fu_1897_p2 <= (tmp_120_reg_2524 or icmp_reg_2518);
    sel_tmp1_fu_1717_p2 <= (tmp_113_reg_2468 and tmp_111_reg_2431);
    sel_tmp2_fu_1680_p2 <= (tmp_75_reg_2442 and tmp_47_reg_2453);
    sel_tmp3_fu_1534_p2 <= (tmp_97_reg_2405 and tmp_91_reg_2394);
    sel_tmp4_fu_1423_p3 <= 
        grp_fu_767_p2 when (tmp_78_reg_2368(0) = '1') else 
        lut_sigmoid_q0;
    sel_tmp5_fu_1901_p2 <= (sel_tmp13_demorgan_fu_1897_p2 xor ap_const_lv1_1);
    sel_tmp6_fu_1430_p2 <= (tmp_80_reg_2379 and tmp_78_reg_2368);
    sel_tmp7_fu_1710_p3 <= 
        tmp_177_cast_fu_1706_p1 when (tmp_111_reg_2431(0) = '1') else 
        lut_tanh_load_2_cast_fu_1697_p1;
    sel_tmp8_fu_1527_p3 <= 
        grp_fu_767_p2 when (tmp_91_reg_2394(0) = '1') else 
        lut_sigmoid_q0;
    sel_tmp9_fu_1907_p2 <= (tmp_127_reg_2535 and tmp_120_reg_2524);
    sel_tmp_fu_1673_p3 <= 
        grp_fu_767_p2 when (tmp_75_reg_2442(0) = '1') else 
        lut_sigmoid_q0;
    storemerge2_cast_fu_1442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(storemerge2_fu_1434_p3),16));
    storemerge2_fu_1434_p3 <= 
        ap_const_lv12_1 when (sel_tmp6_fu_1430_p2(0) = '1') else 
        sel_tmp4_fu_1423_p3;
    storemerge3_cast_fu_1546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(storemerge3_fu_1538_p3),16));
    storemerge3_fu_1538_p3 <= 
        ap_const_lv12_1 when (sel_tmp3_fu_1534_p2(0) = '1') else 
        sel_tmp8_fu_1527_p3;
        storemerge4_cast_fu_1729_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(storemerge4_fu_1721_p3),16));

    storemerge4_fu_1721_p3 <= 
        ap_const_lv14_3000 when (sel_tmp1_fu_1717_p2(0) = '1') else 
        sel_tmp7_fu_1710_p3;
    storemerge_cast_fu_1692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(storemerge_fu_1684_p3),16));
    storemerge_fu_1684_p3 <= 
        ap_const_lv12_1 when (sel_tmp2_fu_1680_p2(0) = '1') else 
        sel_tmp_fu_1673_p3;
    tmp1_fu_1126_p2 <= std_logic_vector(signed(ap_const_lv5_14) + signed(i_cast2_fu_1112_p1));
    tmp26_cast_fu_1132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_1126_p2),6));
    tmp27_cast_fu_1187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_1181_p2),7));
    tmp2_fu_1181_p2 <= std_logic_vector(signed(ap_const_lv6_2D) + signed(i_cast1_fu_1150_p1));
    tmp3_fu_1231_p2 <= std_logic_vector(signed(ap_const_lv7_46) + signed(i_cast_reg_2249));
    tmp4_fu_1246_p2 <= std_logic_vector(signed(ap_const_lv7_5F) + signed(i_cast_reg_2249));
    tmp_101_fu_1504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_160_cast_fu_1500_p1),64));
        tmp_103_fu_1829_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_117_fu_1819_p4),16));

    tmp_105_fu_1509_p2 <= std_logic_vector(signed(ap_const_lv8_87) + signed(j_2_cast_reg_2332));
    tmp_106_fu_1514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_105_fu_1509_p2),64));
    tmp_107_fu_1551_p1 <= weight_Dout_A(16 - 1 downto 0);
        tmp_108_cast_fu_1631_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_43_fu_1598_p4),12));

    tmp_108_fu_1555_p2 <= std_logic_vector(unsigned(tmp_107_fu_1551_p1) + unsigned(g_state_q0));
        tmp_109_cast_fu_1641_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_48_fu_1635_p2),32));

    tmp_109_fu_1561_p4 <= tmp_108_fu_1555_p2(15 downto 5);
        tmp_10_cast_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sampleinput_16b_fu_850_p4),31));

    tmp_10_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_phi_fu_683_p4),64));
        tmp_110_fu_1571_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_109_fu_1561_p4),16));

    tmp_112_fu_1583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_110_fu_1571_p1),64));
    tmp_113_fu_1650_p2 <= "1" when (tmp_109_reg_2425 = ap_const_lv11_400) else "0";
    tmp_114_fu_1658_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(tmp_174_cast_fu_1655_p1));
    tmp_115_fu_1668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_175_cast_fu_1664_p1),64));
    tmp_116_fu_1700_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(lut_tanh_q0));
    tmp_117_fu_1819_p4 <= tmp_98_fu_1802_p2(19 downto 5);
    tmp_118_fu_1758_p2 <= std_logic_vector(unsigned(tmp_89_cast_fu_1754_p1) + unsigned(tmp_14_reg_2217));
    tmp_119_fu_1833_p4 <= tmp_98_fu_1802_p2(19 downto 15);
    tmp_11_fu_995_p3 <= (ch_ena & ap_const_lv2_0);
    tmp_120_cast_fu_1973_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_4_reg_747),7));
    tmp_122_fu_1987_p2 <= std_logic_vector(signed(ap_const_lv8_8C) + signed(j_4_cast_fu_1969_p1));
    tmp_123_fu_1993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_122_fu_1987_p2),64));
    tmp_124_fu_1857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_103_fu_1829_p1),64));
        tmp_127_cast_fu_2023_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_137_fu_2014_p4),21));

    tmp_127_fu_1862_p2 <= "1" when (signed(tmp_117_fu_1819_p4) > signed(ap_const_lv15_7C00)) else "0";
    tmp_128_cast1_fu_1763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_118_fu_1758_p2),64));
        tmp_128_cast_fu_2027_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lstm_output_fu_1998_p1),21));

    tmp_128_fu_1868_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_103_fu_1829_p1));
        tmp_129_cast_fu_2037_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_129_fu_2031_p2),32));

    tmp_129_fu_2031_p2 <= std_logic_vector(signed(tmp_127_cast_fu_2023_p1) + signed(tmp_128_cast_fu_2027_p1));
    tmp_12_fu_2041_p1 <= tmp_10_cast_reg_2162(16 - 1 downto 0);
    tmp_130_fu_1878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_134_cast_fu_1874_p1),64));
    tmp_131_fu_1887_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(lut_tanh_q1));
        tmp_134_cast_fu_1874_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_fu_1868_p2),32));

    tmp_135_fu_1977_p2 <= std_logic_vector(unsigned(tmp_120_cast_fu_1973_p1) + unsigned(tmp_14_reg_2217));
        tmp_136_cast_fu_1893_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_131_fu_1887_p2),14));

    tmp_136_fu_2006_p1 <= weight_Dout_A(16 - 1 downto 0);
    tmp_137_fu_2014_p4 <= tmp_126_fu_2111_p2(31 downto 12);
    tmp_138_cast1_fu_1982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_135_fu_1977_p2),64));
        tmp_144_cast_fu_1394_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_74_fu_1361_p4),12));

        tmp_145_cast_fu_1404_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_81_fu_1398_p2),32));

    tmp_14_fu_1006_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_992_p1) + unsigned(p_shl1_cast_fu_1002_p1));
        tmp_159_cast_fu_1490_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_88_fu_1457_p4),12));

    tmp_15_fu_907_p2 <= std_logic_vector(unsigned(ap_const_lv4_5) + unsigned(j_cast_fu_885_p1));
        tmp_160_cast_fu_1500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_99_fu_1494_p2),32));

    tmp_16_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_907_p2),64));
        tmp_174_cast_fu_1655_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_109_reg_2425),12));

        tmp_175_cast_fu_1664_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_114_fu_1658_p2),32));

        tmp_177_cast_fu_1706_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_116_fu_1700_p2),14));

    tmp_17_fu_889_p1 <= weight_Dout_A(16 - 1 downto 0);
    tmp_18_fu_2047_p1 <= tmp_10_cast_reg_2162(16 - 1 downto 0);
    tmp_1_fu_784_p2 <= "1" when (invdar_reg_635 = ap_const_lv3_4) else "0";
    tmp_20_fu_924_p1 <= weight_Dout_A(16 - 1 downto 0);
    tmp_21_fu_942_p2 <= std_logic_vector(signed(ap_const_lv4_A) + signed(j_cast_reg_2192));
    tmp_22_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_942_p2),64));
    tmp_23_fu_952_p1 <= weight_Dout_A(16 - 1 downto 0);
    tmp_24_fu_2053_p1 <= tmp_10_cast_reg_2162(16 - 1 downto 0);
    tmp_26_fu_918_p2 <= std_logic_vector(unsigned(ap_const_lv5_F) + unsigned(j_cast1_fu_881_p1));
    tmp_27_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_reg_2202),64));
    tmp_28_fu_974_p1 <= weight_Dout_A(16 - 1 downto 0);
    tmp_29_fu_2059_p1 <= tmp_10_cast_reg_2162(16 - 1 downto 0);
    tmp_2_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar1_reg_646),64));
    tmp_31_fu_1024_p2 <= std_logic_vector(unsigned(j_1_cast_fu_1012_p1) + unsigned(p_shl_fu_1016_p3));
    tmp_33_fu_1116_p2 <= std_logic_vector(unsigned(tmp_14_reg_2217) + unsigned(i_cast_fu_1108_p1));
    tmp_34_cast_fu_1121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_1116_p2),64));
    tmp_34_fu_1136_p2 <= std_logic_vector(unsigned(tmp_39_cast_mid2_fu_1088_p1) + unsigned(tmp26_cast_fu_1132_p1));
    tmp_34_mid1_fu_1074_p2 <= std_logic_vector(unsigned(j_1_cast_mid1_fu_1062_p1) + unsigned(p_shl_mid1_fu_1066_p3));
    tmp_35_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_1136_p2),64));
    tmp_35_mid2_fu_1100_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_mid2_v_fu_1092_p3),64));
    tmp_35_mid2_v_fu_1092_p3 <= 
        j_6_fu_1042_p2 when (exitcond3_fu_1048_p2(0) = '1') else 
        ap_phi_mux_j_1_phi_fu_706_p4;
    tmp_37_fu_1324_p3 <= (ap_const_lv1_1 & j_2_reg_724);
    tmp_38_fu_1522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_cast_fu_1519_p1),64));
    tmp_39_cast1_mid2_fu_1147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_cast1_mid2_v_reg_2239),7));
    tmp_39_cast1_mid2_v_fu_1080_p3 <= 
        tmp_34_mid1_fu_1074_p2 when (exitcond3_fu_1048_p2(0) = '1') else 
        tmp_31_fu_1024_p2;
    tmp_39_cast_mid2_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_cast1_mid2_v_fu_1080_p3),6));
    tmp_39_fu_1157_p1 <= weight_Dout_A(16 - 1 downto 0);
    tmp_3_fu_801_p2 <= "1" when (invdar1_reg_646 = ap_const_lv3_4) else "0";
    tmp_40_fu_1332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_724),64));
        tmp_41_cast_fu_1519_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_37_reg_2338),7));

    tmp_41_fu_1592_p2 <= std_logic_vector(unsigned(tmp_73_fu_1588_p1) + unsigned(i_state_q0));
    tmp_43_fu_1598_p4 <= tmp_41_fu_1592_p2(15 downto 5);
        tmp_44_fu_1608_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_43_fu_1598_p4),16));

    tmp_45_fu_1165_p4 <= tmp_42_fu_2065_p2(27 downto 12);
    tmp_46_fu_1620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_1608_p1),64));
    tmp_47_fu_1625_p2 <= "1" when (tmp_43_fu_1598_p4 = ap_const_lv11_400) else "0";
    tmp_48_fu_1635_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(tmp_108_cast_fu_1631_p1));
    tmp_49_fu_1645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_109_cast_fu_1641_p1),64));
    tmp_4_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar2_reg_657),64));
    tmp_50_fu_1174_p2 <= std_logic_vector(unsigned(tmp_45_fu_1165_p4) + unsigned(i_state_q0));
        tmp_51_cast_fu_1153_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(h_state_q0),28));

    tmp_52_fu_1340_p2 <= std_logic_vector(unsigned(ap_const_lv8_7D) + unsigned(j_2_cast_fu_1320_p1));
    tmp_53_fu_1191_p2 <= std_logic_vector(unsigned(tmp_39_cast1_mid2_fu_1147_p1) + unsigned(tmp27_cast_fu_1187_p1));
    tmp_54_fu_1197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_1191_p2),64));
    tmp_55_fu_1207_p1 <= weight_Dout_A(16 - 1 downto 0);
    tmp_56_fu_1346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_1340_p2),64));
    tmp_57_fu_2072_p1 <= tmp_51_cast_reg_2291(16 - 1 downto 0);
    tmp_58_fu_1215_p4 <= tmp_57_fu_2072_p2(27 downto 12);
    tmp_59_fu_1224_p2 <= std_logic_vector(unsigned(tmp_58_fu_1215_p4) + unsigned(f_state_q0));
    tmp_5_fu_818_p2 <= "1" when (invdar2_reg_657 = ap_const_lv3_4) else "0";
    tmp_60_fu_1236_p2 <= std_logic_vector(unsigned(tmp_39_cast1_mid2_reg_2285) + unsigned(tmp3_fu_1231_p2));
    tmp_61_fu_1241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_fu_1236_p2),64));
    tmp_62_fu_1256_p1 <= weight_Dout_A(16 - 1 downto 0);
    tmp_63_fu_2078_p1 <= tmp_51_cast_reg_2291(16 - 1 downto 0);
    tmp_64_fu_1264_p4 <= tmp_63_fu_2078_p2(27 downto 12);
    tmp_65_fu_1355_p2 <= std_logic_vector(unsigned(tmp_76_fu_1351_p1) + unsigned(f_state_q0));
    tmp_66_fu_1273_p2 <= std_logic_vector(unsigned(tmp_64_fu_1264_p4) + unsigned(o_state_q0));
    tmp_67_fu_1251_p2 <= std_logic_vector(unsigned(tmp_39_cast1_mid2_reg_2285) + unsigned(tmp4_fu_1246_p2));
    tmp_68_fu_1280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_reg_2313),64));
    tmp_69_fu_1284_p1 <= weight_Dout_A(16 - 1 downto 0);
    tmp_6_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar3_reg_668),64));
    tmp_70_fu_2084_p1 <= tmp_51_cast_reg_2291(16 - 1 downto 0);
    tmp_71_fu_1292_p4 <= tmp_70_fu_2084_p2(27 downto 12);
    tmp_72_fu_1301_p2 <= std_logic_vector(unsigned(tmp_71_fu_1292_p4) + unsigned(g_state_q0));
    tmp_73_fu_1588_p1 <= weight_Dout_A(16 - 1 downto 0);
    tmp_74_fu_1361_p4 <= tmp_65_fu_1355_p2(15 downto 5);
    tmp_76_fu_1351_p1 <= weight_Dout_A(16 - 1 downto 0);
        tmp_77_fu_1371_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_74_fu_1361_p4),16));

    tmp_79_fu_1383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_fu_1371_p1),64));
    tmp_7_fu_835_p2 <= "1" when (invdar3_reg_668 = ap_const_lv3_4) else "0";
    tmp_80_fu_1388_p2 <= "1" when (tmp_74_fu_1361_p4 = ap_const_lv11_400) else "0";
    tmp_81_fu_1398_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(tmp_144_cast_fu_1394_p1));
    tmp_82_fu_1408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_145_cast_fu_1404_p1),64));
    tmp_84_fu_1413_p2 <= std_logic_vector(signed(ap_const_lv8_82) + signed(j_2_cast_reg_2332));
    tmp_85_fu_1418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_84_fu_1413_p2),64));
    tmp_86_fu_1447_p1 <= weight_Dout_A(16 - 1 downto 0);
    tmp_87_fu_1451_p2 <= std_logic_vector(unsigned(tmp_86_fu_1447_p1) + unsigned(o_state_q0));
    tmp_88_fu_1457_p4 <= tmp_87_fu_1451_p2(15 downto 5);
    tmp_89_cast_fu_1754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_reg_736),7));
    tmp_89_fu_1746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_3_reg_736),64));
    tmp_8_cast_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_ena),7));
    tmp_8_fu_841_p1 <= sampleinput(19 - 1 downto 0);
        tmp_90_fu_1467_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_88_fu_1457_p4),16));

    tmp_93_cast_fu_1776_p4 <= tmp_92_fu_2090_p2(27 downto 8);
    tmp_93_fu_1479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_90_fu_1467_p1),64));
    tmp_97_cast_fu_1793_p4 <= tmp_96_fu_2097_p2(31 downto 12);
    tmp_97_fu_1484_p2 <= "1" when (tmp_88_fu_1457_p4 = ap_const_lv11_400) else "0";
    tmp_98_fu_1802_p2 <= std_logic_vector(unsigned(tmp_93_cast_fu_1776_p4) + unsigned(tmp_97_cast_fu_1793_p4));
    tmp_99_fu_1494_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(tmp_159_cast_fu_1490_p1));
    tmp_9_fu_844_p2 <= std_logic_vector(unsigned(ap_const_lv19_1D4C0) + unsigned(tmp_8_fu_841_p1));
    tmp_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_635),64));
    weight_Addr_A <= std_logic_vector(shift_left(unsigned(weight_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    weight_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_10_fu_876_p1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_CS_fsm_pp2_stage2, ap_CS_fsm_pp2_stage3, ap_enable_reg_pp2_iter1, ap_CS_fsm_state29, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_block_pp0_stage1, tmp_16_fu_913_p1, ap_block_pp0_stage2, tmp_22_fu_947_p1, ap_block_pp0_stage3, tmp_27_fu_970_p1, tmp_35_fu_1142_p1, tmp_54_fu_1197_p1, ap_block_pp1_stage1, tmp_61_fu_1241_p1, ap_block_pp1_stage2, tmp_68_fu_1280_p1, ap_block_pp1_stage3, ap_block_pp2_stage1, tmp_56_fu_1346_p1, ap_block_pp2_stage2, tmp_85_fu_1418_p1, ap_block_pp2_stage3, tmp_106_fu_1514_p1, tmp_38_fu_1522_p1, ap_block_pp4_stage0, tmp_123_fu_1993_p1)
    begin
        if (((ap_block_pp4_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            weight_Addr_A_orig <= tmp_123_fu_1993_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            weight_Addr_A_orig <= ap_const_lv64_91(32 - 1 downto 0);
        elsif (((ap_block_pp2_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            weight_Addr_A_orig <= tmp_38_fu_1522_p1(32 - 1 downto 0);
        elsif (((ap_block_pp2_stage3 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            weight_Addr_A_orig <= tmp_106_fu_1514_p1(32 - 1 downto 0);
        elsif (((ap_block_pp2_stage2 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            weight_Addr_A_orig <= tmp_85_fu_1418_p1(32 - 1 downto 0);
        elsif (((ap_block_pp2_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            weight_Addr_A_orig <= tmp_56_fu_1346_p1(32 - 1 downto 0);
        elsif (((ap_block_pp1_stage3 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            weight_Addr_A_orig <= tmp_68_fu_1280_p1(32 - 1 downto 0);
        elsif (((ap_block_pp1_stage2 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            weight_Addr_A_orig <= tmp_61_fu_1241_p1(32 - 1 downto 0);
        elsif (((ap_block_pp1_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then 
            weight_Addr_A_orig <= tmp_54_fu_1197_p1(32 - 1 downto 0);
        elsif (((ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            weight_Addr_A_orig <= tmp_35_fu_1142_p1(32 - 1 downto 0);
        elsif (((ap_block_pp0_stage3 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            weight_Addr_A_orig <= tmp_27_fu_970_p1(32 - 1 downto 0);
        elsif (((ap_block_pp0_stage2 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            weight_Addr_A_orig <= tmp_22_fu_947_p1(32 - 1 downto 0);
        elsif (((ap_block_pp0_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            weight_Addr_A_orig <= tmp_16_fu_913_p1(32 - 1 downto 0);
        elsif (((ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weight_Addr_A_orig <= tmp_10_fu_876_p1(32 - 1 downto 0);
        else 
            weight_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    weight_Clk_A <= ap_clk;
    weight_Din_A <= ap_const_lv32_0;

    weight_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage3, ap_block_pp2_stage3_11001, ap_enable_reg_pp2_iter1, ap_CS_fsm_state29, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_block_pp4_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp4_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_block_pp2_stage3_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage3) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)) or ((ap_block_pp2_stage2_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)) or ((ap_block_pp2_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)) or ((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_block_pp1_stage3_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_block_pp1_stage2_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_block_pp1_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_block_pp0_stage3_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_block_pp0_stage2_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0)))) then 
            weight_EN_A <= ap_const_logic_1;
        else 
            weight_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    weight_Rst_A <= ap_rst;
    weight_WEN_A <= ap_const_lv4_0;
end behav;
